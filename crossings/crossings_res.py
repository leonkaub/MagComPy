#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Thu Feb 18 17:21:21 2021
#

import wx


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyCrossFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyCrossFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.TAB_TRAVERSAL
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((679, 819))

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
        self.Bind(wx.EVT_MENU, self.on_exit, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Scalar compensation", "")
        self.Bind(wx.EVT_MENU, self.on_scalar, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Vector compensation", "")
        self.Bind(wx.EVT_MENU, self.on_vector, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Prepare files", "")
        self.Bind(wx.EVT_MENU, self.on_prepare, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Start dialog", "")
        self.Bind(wx.EVT_MENU, self.on_start, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Tools")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "About", "")
        self.Bind(wx.EVT_MENU, self.on_about, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.main_panel = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.load_text = wx.TextCtrl(self.main_panel, wx.ID_ANY, "")
        self.browse_btn = wx.Button(self.main_panel, wx.ID_ANY, "Browse")
        self.load_btn = wx.Button(self.main_panel, wx.ID_ANY, "Load data")
        self.choice_x = wx.Choice(self.main_panel, wx.ID_ANY, choices=["- select -"])
        self.choice_y = wx.Choice(self.main_panel, wx.ID_ANY, choices=["- select -"])
        self.decimate_factor = wx.SpinCtrl(self.main_panel, wx.ID_ANY, "1", min=1, max=13)
        self.turns_eps = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.5", min=0.0, max=1000.0)
        self.turns_minangle = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "30.0", min=0.0, max=360.0)
        self.turns_btn = wx.Button(self.main_panel, wx.ID_ANY, "Find turns")
        self.lines_fl_az = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "90.0", min=0.0, max=360.0)
        self.lines_tl_az = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=360.0)
        self.lines_az_tol = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "30.0", min=0.0, max=100.0)
        self.lines_minlength = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "30.0", min=0.0, max=10000.0)
        self.lines_btn = wx.Button(self.main_panel, wx.ID_ANY, "Get lines")
        self.cut_fl = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=-10000.0, max=10000.0)
        self.cut_tl = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=-10000.0, max=10000.0)
        self.cut_btn = wx.Button(self.main_panel, wx.ID_ANY, "Cut lines")
        self.cross_btn = wx.Button(self.main_panel, wx.ID_ANY, "Compute crossings")
        self.cross_stats_select = wx.Choice(self.main_panel, wx.ID_ANY, choices=["- select -"])
        self.cross_lp_freq = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)
        self.cross_lp_freq.SetDigits(4)
        self.cross_sampling = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=1000.0)
        self.cross_lp_btn = wx.Button(self.main_panel, wx.ID_ANY, "View filtered data")
        self.cross_stats_btn = wx.Button(self.main_panel, wx.ID_ANY, "Get statistics")
        self.cross_plot_btn = wx.Button(self.main_panel, wx.ID_ANY, "Plot results")
        self.cross_save_btn = wx.Button(self.main_panel, wx.ID_ANY, "Save cross-differences")
        self.log_text = wx.TextCtrl(self.main_panel, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY)
        self.log_save_btn = wx.Button(self.main_panel, wx.ID_ANY, "Save log to file")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_browse_btn, self.browse_btn)
        self.Bind(wx.EVT_BUTTON, self.on_load_btn, self.load_btn)
        self.Bind(wx.EVT_BUTTON, self.on_turns_btn, self.turns_btn)
        self.Bind(wx.EVT_BUTTON, self.on_lines_btn, self.lines_btn)
        self.Bind(wx.EVT_BUTTON, self.on_cut_btn, self.cut_btn)
        self.Bind(wx.EVT_BUTTON, self.on_cross_btn, self.cross_btn)
        self.Bind(wx.EVT_BUTTON, self.on_cross_lp_btn, self.cross_lp_btn)
        self.Bind(wx.EVT_BUTTON, self.on_cross_stats_btn, self.cross_stats_btn)
        self.Bind(wx.EVT_BUTTON, self.on_cross_plot_btn, self.cross_plot_btn)
        self.Bind(wx.EVT_BUTTON, self.on_cross_save_btn, self.cross_save_btn)
        self.Bind(wx.EVT_BUTTON, self.on_log_save_btn, self.log_save_btn)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyCrossFrame.__set_properties
        self.SetTitle("Calculate crossings")
        self.choice_x.SetSelection(0)
        self.choice_y.SetSelection(0)
        self.cross_stats_select.SetSelection(0)
        self.main_panel.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyCrossFrame.__do_layout
        panel_sizer = wx.BoxSizer(wx.VERTICAL)
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        log_sizer = wx.BoxSizer(wx.VERTICAL)
        cross_sizer = wx.BoxSizer(wx.VERTICAL)
        cross_btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
        cross_lp_sizer = wx.BoxSizer(wx.HORIZONTAL)
        cross_stats_sizer = wx.BoxSizer(wx.HORIZONTAL)
        cut_sizer = wx.BoxSizer(wx.VERTICAL)
        cut_grid_sizer = wx.FlexGridSizer(1, 2, 3, 3)
        cut_tl_sizer = wx.BoxSizer(wx.HORIZONTAL)
        cut_fl_sizer = wx.BoxSizer(wx.HORIZONTAL)
        lines_sizer = wx.BoxSizer(wx.VERTICAL)
        lines_grid_sizer = wx.FlexGridSizer(2, 2, 3, 3)
        lines_minlength_sizer = wx.BoxSizer(wx.HORIZONTAL)
        lines_tol_sizer = wx.BoxSizer(wx.HORIZONTAL)
        lines_tl_sizer = wx.BoxSizer(wx.HORIZONTAL)
        lines_fl_sizer = wx.BoxSizer(wx.HORIZONTAL)
        turns_sizer = wx.BoxSizer(wx.VERTICAL)
        turns_grid_sizer = wx.FlexGridSizer(1, 2, 3, 3)
        turns_minangle_sizer = wx.BoxSizer(wx.HORIZONTAL)
        turns_eps_sizer = wx.BoxSizer(wx.HORIZONTAL)
        load_sizer = wx.BoxSizer(wx.VERTICAL)
        xy_sizer = wx.BoxSizer(wx.HORIZONTAL)
        file_sizer = wx.BoxSizer(wx.HORIZONTAL)
        title = wx.StaticText(self.main_panel, wx.ID_ANY,
                              "Calculate tie-line cross-differences: quality control of magnetic data")
        title.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        main_sizer.Add(title, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        file_label = wx.StaticText(self.main_panel, wx.ID_ANY, "File to process")
        file_label.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        load_sizer.Add(file_label, 0, 0, 0)
        load_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Select file")
        file_sizer.Add(load_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)
        file_sizer.Add(self.load_text, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        file_sizer.Add(self.browse_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        load_sizer.Add(file_sizer, 0, wx.ALL | wx.EXPAND, 5)
        load_sizer.Add(self.load_btn, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        label_4 = wx.StaticText(self.main_panel, wx.ID_ANY, "Select coordinates from file:")
        xy_sizer.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
        x_label = wx.StaticText(self.main_panel, wx.ID_ANY, "X")
        xy_sizer.Add(x_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.LEFT | wx.TOP, 3)
        xy_sizer.Add(self.choice_x, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        y_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Y")
        xy_sizer.Add(y_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.LEFT | wx.TOP, 3)
        xy_sizer.Add(self.choice_y, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        decimate_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Decimate factor: ")
        xy_sizer.Add(decimate_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.LEFT | wx.TOP, 3)
        xy_sizer.Add(self.decimate_factor, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        load_sizer.Add(xy_sizer, 0, wx.ALL, 5)
        main_sizer.Add(load_sizer, 0, wx.ALL | wx.EXPAND, 5)
        static_line_1 = wx.StaticLine(self.main_panel, wx.ID_ANY)
        main_sizer.Add(static_line_1, 0, wx.EXPAND, 0)
        turns_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Find turning points")
        turns_label.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        turns_sizer.Add(turns_label, 0, 0, 0)
        turns_eps_label = wx.StaticText(self.main_panel, wx.ID_ANY, "rdp epsilon")
        turns_eps_sizer.Add(turns_eps_label, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)
        turns_eps_sizer.Add(self.turns_eps, 0, 0, 0)
        turns_grid_sizer.Add(turns_eps_sizer, 1, wx.EXPAND, 0)
        turns_minangle_label = wx.StaticText(self.main_panel, wx.ID_ANY, u"minimum angle [Â°]")
        turns_minangle_sizer.Add(turns_minangle_label, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)
        turns_minangle_sizer.Add(self.turns_minangle, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        turns_grid_sizer.Add(turns_minangle_sizer, 1, wx.EXPAND, 0)
        turns_sizer.Add(turns_grid_sizer, 0, wx.EXPAND, 0)
        turns_sizer.Add(self.turns_btn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        main_sizer.Add(turns_sizer, 0, wx.ALL | wx.EXPAND, 5)
        lines_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Assign line types")
        lines_label.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        lines_sizer.Add(lines_label, 0, 0, 0)
        lines_fl_label = wx.StaticText(self.main_panel, wx.ID_ANY, u"flight line azimuth [Â°]")
        lines_fl_sizer.Add(lines_fl_label, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)
        lines_fl_sizer.Add(self.lines_fl_az, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        lines_grid_sizer.Add(lines_fl_sizer, 1, wx.EXPAND, 0)
        lines_tl_label = wx.StaticText(self.main_panel, wx.ID_ANY, u"tie line azimuth [Â°]")
        lines_tl_sizer.Add(lines_tl_label, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT | wx.TOP, 3)
        lines_tl_sizer.Add(self.lines_tl_az, 0, 0, 0)
        lines_grid_sizer.Add(lines_tl_sizer, 1, wx.EXPAND, 0)
        lines_tol_label = wx.StaticText(self.main_panel, wx.ID_ANY, u"angle tolerance [Â°]")
        lines_tol_sizer.Add(lines_tol_label, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)
        lines_tol_sizer.Add(self.lines_az_tol, 0, 0, 0)
        lines_grid_sizer.Add(lines_tol_sizer, 1, wx.EXPAND, 0)
        lines_minlength_label = wx.StaticText(self.main_panel, wx.ID_ANY, "minimum length [m]")
        lines_minlength_sizer.Add(lines_minlength_label, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)
        lines_minlength_sizer.Add(self.lines_minlength, 0, 0, 0)
        lines_grid_sizer.Add(lines_minlength_sizer, 1, wx.EXPAND, 0)
        lines_sizer.Add(lines_grid_sizer, 1, wx.EXPAND, 0)
        lines_sizer.Add(self.lines_btn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        main_sizer.Add(lines_sizer, 0, wx.ALL | wx.EXPAND, 5)
        cut_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Cut line length")
        cut_label.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        cut_sizer.Add(cut_label, 0, 0, 0)
        cut_fl_label = wx.StaticText(self.main_panel, wx.ID_ANY, "flight lines \n# of readings")
        cut_fl_sizer.Add(cut_fl_label, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)
        cut_fl_sizer.Add(self.cut_fl, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        cut_grid_sizer.Add(cut_fl_sizer, 1, wx.EXPAND, 0)
        cut_tl_label = wx.StaticText(self.main_panel, wx.ID_ANY, "tie lines\n# of readings")
        cut_tl_sizer.Add(cut_tl_label, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)
        cut_tl_sizer.Add(self.cut_tl, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        cut_grid_sizer.Add(cut_tl_sizer, 1, wx.EXPAND, 0)
        cut_sizer.Add(cut_grid_sizer, 1, wx.EXPAND, 0)
        cut_sizer.Add(self.cut_btn, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        main_sizer.Add(cut_sizer, 0, wx.ALL | wx.EXPAND, 5)
        cross_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Compute tie-line crossing locations")
        cross_label.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        cross_sizer.Add(cross_label, 0, 0, 0)
        cross_sizer.Add(self.cross_btn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        static_line_4 = wx.StaticLine(self.main_panel, wx.ID_ANY)
        cross_sizer.Add(static_line_4, 0, wx.EXPAND, 0)
        stats_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Statistics")
        stats_label.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        cross_sizer.Add(stats_label, 0, 0, 0)
        cross_stats_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Select variable to compute cross-differences:")
        cross_stats_sizer.Add(cross_stats_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
        cross_stats_sizer.Add(self.cross_stats_select, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
        cross_sizer.Add(cross_stats_sizer, 0, wx.EXPAND, 0)
        cross_lp_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Apply LP filter? Cutting freq.")
        cross_lp_sizer.Add(cross_lp_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
        cross_lp_sizer.Add(self.cross_lp_freq, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        cross_sampling_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Sampling rate")
        cross_lp_sizer.Add(cross_sampling_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 3)
        cross_lp_sizer.Add(self.cross_sampling, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        cross_lp_sizer.Add(self.cross_lp_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
        cross_sizer.Add(cross_lp_sizer, 1, wx.EXPAND, 0)
        cross_btn_sizer.Add((20, 20), 1, 0, 0)
        cross_btn_sizer.Add(self.cross_stats_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        cross_btn_sizer.Add(self.cross_plot_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        cross_btn_sizer.Add(self.cross_save_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        cross_btn_sizer.Add((20, 20), 1, 0, 0)
        cross_sizer.Add(cross_btn_sizer, 1, wx.EXPAND, 0)
        main_sizer.Add(cross_sizer, 1, wx.ALL | wx.EXPAND, 5)
        static_line_3 = wx.StaticLine(self.main_panel, wx.ID_ANY)
        main_sizer.Add(static_line_3, 0, wx.EXPAND, 0)
        log_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Log")
        log_label.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        log_sizer.Add(log_label, 0, 0, 0)
        log_sizer.Add(self.log_text, 1, wx.EXPAND, 0)
        log_sizer.Add(self.log_save_btn, 0, 0, 0)
        main_sizer.Add(log_sizer, 1, wx.ALL | wx.EXPAND, 5)
        self.main_panel.SetSizer(main_sizer)
        panel_sizer.Add(self.main_panel, 1, wx.EXPAND, 0)
        self.SetSizer(panel_sizer)
        self.Layout()
        # end wxGlade

    def on_exit(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_exit' not implemented!")
        event.Skip()

    def on_scalar(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_scalar' not implemented!")
        event.Skip()

    def on_vector(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_vector' not implemented!")
        event.Skip()

    def on_prepare(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_prepare' not implemented!")
        event.Skip()

    def on_start(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_start' not implemented!")
        event.Skip()

    def on_about(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_about' not implemented!")
        event.Skip()

    def on_browse_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_browse_btn' not implemented!")
        event.Skip()

    def on_load_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_load_btn' not implemented!")
        event.Skip()

    def on_turns_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_turns_btn' not implemented!")
        event.Skip()

    def on_lines_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_lines_btn' not implemented!")
        event.Skip()

    def on_cut_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_cut_btn' not implemented!")
        event.Skip()

    def on_cross_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_cross_btn' not implemented!")
        event.Skip()

    def on_cross_lp_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_cross_lp_btn' not implemented!")
        event.Skip()

    def on_cross_stats_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_cross_stats_btn' not implemented!")
        event.Skip()

    def on_cross_plot_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_cross_plot_btn' not implemented!")
        event.Skip()

    def on_cross_save_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_cross_save_btn' not implemented!")
        event.Skip()

    def on_log_save_btn(self, event):  # wxGlade: MyCrossFrame.<event_handler>
        print("Event handler 'on_log_save_btn' not implemented!")
        event.Skip()


# end of class MyCrossFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyCrossFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True


# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
