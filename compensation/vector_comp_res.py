#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Tue Feb 23 14:55:46 2021
#

import wx


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyVectorFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyVectorFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((694, 801))

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
        self.Bind(wx.EVT_MENU, self.on_exit, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Prepare files", "")
        self.Bind(wx.EVT_MENU, self.on_prep, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Scalar compensation", "")
        self.Bind(wx.EVT_MENU, self.on_scalar, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Calculate crossings", "")
        self.Bind(wx.EVT_MENU, self.on_crossings, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Start dialog", "")
        self.Bind(wx.EVT_MENU, self.on_start, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Tools")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "About", "")
        self.Bind(wx.EVT_MENU, self.on_about, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.main_panel = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.main_window = wx.SplitterWindow(self.main_panel, wx.ID_ANY)
        self.find_window = wx.Panel(self.main_window, wx.ID_ANY)
        self.find_file = wx.TextCtrl(self.find_window, wx.ID_ANY, "")
        self.find_browse_btn = wx.Button(self.find_window, wx.ID_ANY, "Browse")
        self.find_load_btn = wx.Button(self.find_window, wx.ID_ANY, "Load")
        self.find_choice_x = wx.Choice(self.find_window, wx.ID_ANY, choices=["- select -"])
        self.find_choice_y = wx.Choice(self.find_window, wx.ID_ANY, choices=["- select -"])
        self.find_choice_z = wx.Choice(self.find_window, wx.ID_ANY, choices=["- select -"])
        self.find_scalar = wx.SpinCtrlDouble(self.find_window, wx.ID_ANY, "0.0", min=0.0, max=100000.0)
        self.find_btn = wx.Button(self.find_window, wx.ID_ANY, "Find")
        self.coef_file = wx.TextCtrl(self.find_window, wx.ID_ANY, "")
        self.load_coef_btn = wx.Button(self.find_window, wx.ID_ANY, "Browse")
        self.coef = wx.TextCtrl(self.find_window, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY)
        self.save_coef_btn = wx.Button(self.find_window, wx.ID_ANY, "Save to file")
        self.apply_window = wx.Panel(self.main_window, wx.ID_ANY)
        self.apply_load = wx.TextCtrl(self.apply_window, wx.ID_ANY, "")
        self.apply_browse_btn = wx.Button(self.apply_window, wx.ID_ANY, "Browse")
        self.apply_load_btn = wx.Button(self.apply_window, wx.ID_ANY, "Load")
        self.apply_choice_x = wx.Choice(self.apply_window, wx.ID_ANY, choices=["- select -"])
        self.apply_choice_y = wx.Choice(self.apply_window, wx.ID_ANY, choices=["- select -"])
        self.apply_choice_z = wx.Choice(self.apply_window, wx.ID_ANY, choices=["- select -"])
        self.apply_btn = wx.Button(self.apply_window, wx.ID_ANY, "Apply")
        self.new_column = wx.TextCtrl(self.apply_window, wx.ID_ANY, "")
        self.save_btn = wx.Button(self.apply_window, wx.ID_ANY, "Save data")
        self.log_text = wx.TextCtrl(self.main_panel, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY)
        self.save_log_btn = wx.Button(self.main_panel, wx.ID_ANY, "Save log to file")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_find_browse_btn, self.find_browse_btn)
        self.Bind(wx.EVT_BUTTON, self.on_find_load_btn, self.find_load_btn)
        self.Bind(wx.EVT_BUTTON, self.on_find_btn, self.find_btn)
        self.Bind(wx.EVT_BUTTON, self.on_load_coef_btn, self.load_coef_btn)
        self.Bind(wx.EVT_BUTTON, self.on_save_coef_btn, self.save_coef_btn)
        self.Bind(wx.EVT_BUTTON, self.on_apply_browse_btn, self.apply_browse_btn)
        self.Bind(wx.EVT_BUTTON, self.on_apply_load_btn, self.apply_load_btn)
        self.Bind(wx.EVT_BUTTON, self.on_apply_btn, self.apply_btn)
        self.Bind(wx.EVT_BUTTON, self.on_save_btn, self.save_btn)
        self.Bind(wx.EVT_BUTTON, self.on_save_log_btn, self.save_log_btn)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyVectorFrame.__set_properties
        self.SetTitle("Vector compensation")
        self.find_choice_x.SetSelection(0)
        self.find_choice_y.SetSelection(0)
        self.find_choice_z.SetSelection(0)
        self.apply_choice_x.SetSelection(0)
        self.apply_choice_y.SetSelection(0)
        self.apply_choice_z.SetSelection(0)
        self.main_window.SetMinimumPaneSize(20)
        self.main_panel.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyVectorFrame.__do_layout
        panel_sizer = wx.BoxSizer(wx.VERTICAL)
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        log_sizer = wx.BoxSizer(wx.VERTICAL)
        apply_sizer = wx.BoxSizer(wx.VERTICAL)
        save_sizer = wx.BoxSizer(wx.HORIZONTAL)
        apply_col_sizer = wx.BoxSizer(wx.HORIZONTAL)
        aplly_load_sizer = wx.BoxSizer(wx.HORIZONTAL)
        find_sizer = wx.BoxSizer(wx.VERTICAL)
        coef_sizer = wx.BoxSizer(wx.HORIZONTAL)
        load_coef_sizer = wx.BoxSizer(wx.HORIZONTAL)
        scalar_sizer = wx.BoxSizer(wx.HORIZONTAL)
        find_col_sizer = wx.BoxSizer(wx.HORIZONTAL)
        load_sizer = wx.BoxSizer(wx.HORIZONTAL)
        find_label = wx.StaticText(self.find_window, wx.ID_ANY, "Find coefficients")
        find_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Segoe UI"))
        find_sizer.Add(find_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM | wx.TOP, 5)
        find_load_label = wx.StaticText(self.find_window, wx.ID_ANY, "Filepath")
        load_sizer.Add(find_load_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        load_sizer.Add(self.find_file, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        load_sizer.Add(self.find_browse_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        find_sizer.Add(load_sizer, 0, wx.ALL | wx.EXPAND, 3)
        find_sizer.Add(self.find_load_btn, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        static_line_1 = wx.StaticLine(self.find_window, wx.ID_ANY)
        find_sizer.Add(static_line_1, 0, wx.EXPAND, 0)
        find_x_label = wx.StaticText(self.find_window, wx.ID_ANY, "X")
        find_col_sizer.Add(find_x_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        find_col_sizer.Add(self.find_choice_x, 1, 0, 0)
        find_y_label = wx.StaticText(self.find_window, wx.ID_ANY, "Y")
        find_col_sizer.Add(find_y_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        find_col_sizer.Add(self.find_choice_y, 1, 0, 0)
        find_z_label = wx.StaticText(self.find_window, wx.ID_ANY, "Z")
        find_col_sizer.Add(find_z_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        find_col_sizer.Add(self.find_choice_z, 1, 0, 0)
        find_sizer.Add(find_col_sizer, 0, wx.ALL | wx.EXPAND, 3)
        find_scalar_label = wx.StaticText(self.find_window, wx.ID_ANY, "Scalar value")
        scalar_sizer.Add(find_scalar_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        scalar_sizer.Add(self.find_scalar, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        find_sizer.Add(scalar_sizer, 0, wx.ALL | wx.EXPAND, 3)
        find_sizer.Add(self.find_btn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 3)
        static_line_2 = wx.StaticLine(self.find_window, wx.ID_ANY)
        find_sizer.Add(static_line_2, 0, wx.EXPAND, 0)
        load_coef_label = wx.StaticText(self.find_window, wx.ID_ANY, "Load coefficients from file (optional)")
        load_coef_sizer.Add(load_coef_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        load_coef_sizer.Add(self.coef_file, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        load_coef_sizer.Add(self.load_coef_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        find_sizer.Add(load_coef_sizer, 0, wx.ALL | wx.EXPAND, 3)
        static_line_3 = wx.StaticLine(self.find_window, wx.ID_ANY)
        find_sizer.Add(static_line_3, 0, wx.EXPAND, 0)
        find_sizer.Add((20, 20), 0, 0, 0)
        coef_label = wx.StaticText(self.find_window, wx.ID_ANY, "Coefficients")
        coef_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        find_sizer.Add(coef_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 3)
        coef_sizer.Add(self.coef, 1, wx.ALL | wx.EXPAND, 3)
        coef_sizer.Add(self.save_coef_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        find_sizer.Add(coef_sizer, 1, wx.EXPAND, 0)
        self.find_window.SetSizer(find_sizer)
        apply_label = wx.StaticText(self.apply_window, wx.ID_ANY, "Apply coefficients")
        apply_label.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Segoe UI"))
        apply_sizer.Add(apply_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        apply_load_label = wx.StaticText(self.apply_window, wx.ID_ANY, "Filepath")
        aplly_load_sizer.Add(apply_load_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        aplly_load_sizer.Add(self.apply_load, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        aplly_load_sizer.Add(self.apply_browse_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        apply_sizer.Add(aplly_load_sizer, 0, wx.ALL | wx.EXPAND, 3)
        apply_sizer.Add(self.apply_load_btn, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        static_line_4 = wx.StaticLine(self.apply_window, wx.ID_ANY)
        apply_sizer.Add(static_line_4, 0, wx.EXPAND, 0)
        apply_x_label = wx.StaticText(self.apply_window, wx.ID_ANY, "X")
        apply_col_sizer.Add(apply_x_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        apply_col_sizer.Add(self.apply_choice_x, 1, 0, 0)
        apply_y_label = wx.StaticText(self.apply_window, wx.ID_ANY, "Y")
        apply_col_sizer.Add(apply_y_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        apply_col_sizer.Add(self.apply_choice_y, 1, 0, 0)
        apply_z_label = wx.StaticText(self.apply_window, wx.ID_ANY, "Z")
        apply_col_sizer.Add(apply_z_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        apply_col_sizer.Add(self.apply_choice_z, 1, 0, 0)
        apply_sizer.Add(apply_col_sizer, 0, wx.ALL | wx.EXPAND, 3)
        apply_sizer.Add(self.apply_btn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        static_line_5 = wx.StaticLine(self.apply_window, wx.ID_ANY)
        apply_sizer.Add(static_line_5, 0, wx.EXPAND, 0)
        save_label = wx.StaticText(self.apply_window, wx.ID_ANY, "Column name for new data")
        save_sizer.Add(save_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        save_sizer.Add(self.new_column, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        save_sizer.Add(self.save_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        apply_sizer.Add(save_sizer, 1, wx.ALL, 3)
        self.apply_window.SetSizer(apply_sizer)
        self.main_window.SplitHorizontally(self.find_window, self.apply_window)
        main_sizer.Add(self.main_window, 3, wx.EXPAND, 0)
        log_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Log")
        log_sizer.Add(log_label, 0, 0, 0)
        log_sizer.Add(self.log_text, 1, wx.EXPAND, 0)
        log_sizer.Add(self.save_log_btn, 0, 0, 0)
        main_sizer.Add(log_sizer, 1, wx.ALL | wx.EXPAND, 5)
        self.main_panel.SetSizer(main_sizer)
        panel_sizer.Add(self.main_panel, 1, wx.EXPAND, 0)
        self.SetSizer(panel_sizer)
        self.Layout()
        # end wxGlade

    def on_exit(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_exit' not implemented!")
        event.Skip()

    def on_prep(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_prep' not implemented!")
        event.Skip()

    def on_scalar(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_scalar' not implemented!")
        event.Skip()

    def on_crossings(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_crossings' not implemented!")
        event.Skip()

    def on_start(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_start' not implemented!")
        event.Skip()

    def on_about(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_about' not implemented!")
        event.Skip()

    def on_find_browse_btn(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_find_browse_btn' not implemented!")
        event.Skip()

    def on_find_load_btn(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_find_load_btn' not implemented!")
        event.Skip()

    def on_find_btn(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_find_btn' not implemented!")
        event.Skip()

    def on_load_coef_btn(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_load_coef_btn' not implemented!")
        event.Skip()

    def on_save_coef_btn(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_save_coef_btn' not implemented!")
        event.Skip()

    def on_apply_browse_btn(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_apply_browse_btn' not implemented!")
        event.Skip()

    def on_apply_load_btn(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_apply_load_btn' not implemented!")
        event.Skip()

    def on_apply_btn(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_apply_btn' not implemented!")
        event.Skip()

    def on_save_btn(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_save_btn' not implemented!")
        event.Skip()

    def on_save_log_btn(self, event):  # wxGlade: MyVectorFrame.<event_handler>
        print("Event handler 'on_save_log_btn' not implemented!")
        event.Skip()


# end of class MyVectorFrame


class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyVectorFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True


# end of class MyApp


if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
