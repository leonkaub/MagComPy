#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Tue Feb 23 14:57:29 2021
#

import wx


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyScalarFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyScalarFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((675, 803))

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
        self.Bind(wx.EVT_MENU, self.on_exit, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Prepare files", "")
        self.Bind(wx.EVT_MENU, self.on_prep, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Vector compensation", "")
        self.Bind(wx.EVT_MENU, self.on_vector, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Calculate crossings", "")
        self.Bind(wx.EVT_MENU, self.on_crossings, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Start dialog", "")
        self.Bind(wx.EVT_MENU, self.on_start, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Tools")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "About", "")
        self.Bind(wx.EVT_MENU, self.on_about, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.main_panel = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.calibfile_text = wx.TextCtrl(self.main_panel, wx.ID_ANY, "")
        self.calibfile_btn = wx.Button(self.main_panel, wx.ID_ANY, "Browse")
        self.surfile_text = wx.TextCtrl(self.main_panel, wx.ID_ANY, "")
        self.surfile_btn = wx.Button(self.main_panel, wx.ID_ANY, "Browse")
        self.load_btn = wx.Button(self.main_panel, wx.ID_ANY, "Load data")
        self.settings_notebook = wx.Notebook(self.main_panel, wx.ID_ANY)
        self.nb_comp_panel = wx.Panel(self.settings_notebook, wx.ID_ANY)
        self.comp_lp = wx.SpinCtrlDouble(self.nb_comp_panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)
        self.comp_lp.SetDigits(4)
        self.comp_hp = wx.SpinCtrlDouble(self.nb_comp_panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)
        self.comp_hp.SetDigits(4)
        self.comp_go_btn = wx.Button(self.nb_comp_panel, wx.ID_ANY, "Go!")
        self.plot_calib_spectrum_btn = wx.Button(self.nb_comp_panel, wx.ID_ANY, "spectrum")
        self.plot_calib_time_btn = wx.Button(self.nb_comp_panel, wx.ID_ANY, "time series")
        self.plot_calib_scatter_btn = wx.Button(self.nb_comp_panel, wx.ID_ANY, "XY plot")
        self.plot_sur_spectrum_btn = wx.Button(self.nb_comp_panel, wx.ID_ANY, "spectrum")
        self.plot_sur_time_btn = wx.Button(self.nb_comp_panel, wx.ID_ANY, "time series")
        self.plot_sur_scatter_btn = wx.Button(self.nb_comp_panel, wx.ID_ANY, "XY plot")
        self.show_par_btn = wx.Button(self.nb_comp_panel, wx.ID_ANY, "Show parameters")
        self.save_par_btn = wx.Button(self.nb_comp_panel, wx.ID_ANY, "Save parameters")
        self.save_btn = wx.Button(self.nb_comp_panel, wx.ID_ANY, "Save data")
        self.nb_lp_panel = wx.Panel(self.settings_notebook, wx.ID_ANY)
        self.lpsweep_hp = wx.SpinCtrlDouble(self.nb_lp_panel, wx.ID_ANY, "0.0", min=0.0, max=10.0)
        self.lpsweep_hp.SetDigits(4)
        self.lpsweep_lps = wx.TextCtrl(self.nb_lp_panel, wx.ID_ANY, "0.1,0.3,0.7,1.0,1.3,1.7,2.0",
                                       style=wx.TE_MULTILINE)
        self.lpsweep_go_btn = wx.Button(self.nb_lp_panel, wx.ID_ANY, "Go!")
        self.nb_hp_panel = wx.Panel(self.settings_notebook, wx.ID_ANY)
        self.hpsweep_lp = wx.SpinCtrlDouble(self.nb_hp_panel, wx.ID_ANY, "0.0", min=0.0, max=10.0)
        self.hpsweep_lp.SetDigits(4)
        self.hpsweep_hps = wx.TextCtrl(self.nb_hp_panel, wx.ID_ANY, "0.001,0.005,0.01,0.05,0.1", style=wx.TE_MULTILINE)
        self.hpsweep_go_btn = wx.Button(self.nb_hp_panel, wx.ID_ANY, "Go!")
        self.results_text = wx.TextCtrl(self.main_panel, wx.ID_ANY, "",
                                        style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY)
        self.log_text = wx.TextCtrl(self.main_panel, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY)
        self.log_save_btn = wx.Button(self.main_panel, wx.ID_ANY, "Save log to file")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_calibfile_btn, self.calibfile_btn)
        self.Bind(wx.EVT_BUTTON, self.on_surfile_btn, self.surfile_btn)
        self.Bind(wx.EVT_BUTTON, self.on_load_btn, self.load_btn)
        self.Bind(wx.EVT_BUTTON, self.on_comp_go_btn, self.comp_go_btn)
        self.Bind(wx.EVT_BUTTON, self.on_plot_calib_spectrum_btn, self.plot_calib_spectrum_btn)
        self.Bind(wx.EVT_BUTTON, self.on_plot_calib_time_btn, self.plot_calib_time_btn)
        self.Bind(wx.EVT_BUTTON, self.on_plot_calib_scatter_btn, self.plot_calib_scatter_btn)
        self.Bind(wx.EVT_BUTTON, self.on_plot_sur_spectrum_btn, self.plot_sur_spectrum_btn)
        self.Bind(wx.EVT_BUTTON, self.on_plot_sur_time_btn, self.plot_sur_time_btn)
        self.Bind(wx.EVT_BUTTON, self.on_plot_sur_scatter_btn, self.plot_sur_scatter_btn)
        self.Bind(wx.EVT_BUTTON, self.on_show_par_btn, self.show_par_btn)
        self.Bind(wx.EVT_BUTTON, self.on_save_par_btn, self.save_par_btn)
        self.Bind(wx.EVT_BUTTON, self.on_save_btn, self.save_btn)
        self.Bind(wx.EVT_BUTTON, self.on_lpsweep_go_btn, self.lpsweep_go_btn)
        self.Bind(wx.EVT_BUTTON, self.on_hpsweep_go_btn, self.hpsweep_go_btn)
        self.Bind(wx.EVT_BUTTON, self.on_log_save_btn, self.log_save_btn)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyScalarFrame.__set_properties
        self.SetTitle("Scalar compensation")
        self.lpsweep_hp.SetIncrement(0.1)
        self.hpsweep_lp.SetIncrement(0.1)
        self.main_panel.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyScalarFrame.__do_layout
        panel_sizer = wx.BoxSizer(wx.VERTICAL)
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        log_sizer = wx.BoxSizer(wx.VERTICAL)
        results_sizer = wx.BoxSizer(wx.VERTICAL)
        hpsweep_sizer = wx.BoxSizer(wx.VERTICAL)
        hpsweep_lp_sizer = wx.BoxSizer(wx.HORIZONTAL)
        lpsweep_sizer = wx.BoxSizer(wx.VERTICAL)
        lpsweep_hp_sizer = wx.BoxSizer(wx.HORIZONTAL)
        comp_sizer = wx.BoxSizer(wx.VERTICAL)
        comp_results_sizer = wx.BoxSizer(wx.HORIZONTAL)
        save_sizer = wx.BoxSizer(wx.VERTICAL)
        comp_plot_sizer = wx.FlexGridSizer(2, 4, 4, 4)
        comp_freq_sizer = wx.FlexGridSizer(2, 2, 3, 3)
        file_sizer = wx.BoxSizer(wx.VERTICAL)
        files_grid_sizer = wx.FlexGridSizer(2, 3, 3, 3)
        file_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Select files")
        file_sizer.Add(file_label, 0, wx.ALL, 5)
        calibfile_label = wx.StaticText(self.main_panel, wx.ID_ANY, "calibration file")
        files_grid_sizer.Add(calibfile_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        files_grid_sizer.Add(self.calibfile_text, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        files_grid_sizer.Add(self.calibfile_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        surfile_label = wx.StaticText(self.main_panel, wx.ID_ANY, "survey file")
        files_grid_sizer.Add(surfile_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        files_grid_sizer.Add(self.surfile_text, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        files_grid_sizer.Add(self.surfile_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        files_grid_sizer.AddGrowableCol(1)
        file_sizer.Add(files_grid_sizer, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
        file_sizer.Add(self.load_btn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM | wx.TOP, 5)
        main_sizer.Add(file_sizer, 0, wx.EXPAND, 0)
        comp_lp_label = wx.StaticText(self.nb_comp_panel, wx.ID_ANY, "LP cutting frequency")
        comp_freq_sizer.Add(comp_lp_label, 0, wx.ALIGN_CENTER, 0)
        comp_freq_sizer.Add(self.comp_lp, 0, wx.EXPAND, 0)
        comp_hp_label = wx.StaticText(self.nb_comp_panel, wx.ID_ANY, "HP cutting frequency")
        comp_freq_sizer.Add(comp_hp_label, 0, wx.ALIGN_CENTER, 0)
        comp_freq_sizer.Add(self.comp_hp, 0, wx.EXPAND, 0)
        comp_sizer.Add(comp_freq_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM | wx.TOP, 5)
        comp_sizer.Add(self.comp_go_btn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM | wx.TOP, 5)
        static_line_1 = wx.StaticLine(self.nb_comp_panel, wx.ID_ANY)
        comp_sizer.Add(static_line_1, 0, wx.EXPAND, 0)
        plot_calib_label = wx.StaticText(self.nb_comp_panel, wx.ID_ANY, "plot calibration data")
        comp_plot_sizer.Add(plot_calib_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        comp_plot_sizer.Add(self.plot_calib_spectrum_btn, 0, 0, 0)
        comp_plot_sizer.Add(self.plot_calib_time_btn, 0, 0, 0)
        comp_plot_sizer.Add(self.plot_calib_scatter_btn, 0, 0, 0)
        plot_sur_label = wx.StaticText(self.nb_comp_panel, wx.ID_ANY, "plot survey data")
        comp_plot_sizer.Add(plot_sur_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        comp_plot_sizer.Add(self.plot_sur_spectrum_btn, 0, 0, 0)
        comp_plot_sizer.Add(self.plot_sur_time_btn, 0, 0, 0)
        comp_plot_sizer.Add(self.plot_sur_scatter_btn, 0, 0, 0)
        comp_results_sizer.Add(comp_plot_sizer, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 7)
        static_line_4 = wx.StaticLine(self.nb_comp_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
        comp_results_sizer.Add(static_line_4, 0, wx.EXPAND, 0)
        save_sizer.Add(self.show_par_btn, 1, wx.ALL | wx.EXPAND, 2)
        save_sizer.Add(self.save_par_btn, 1, wx.ALL | wx.EXPAND, 2)
        comp_results_sizer.Add(save_sizer, 0, wx.ALIGN_CENTER | wx.ALL, 7)
        static_line_5 = wx.StaticLine(self.nb_comp_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
        comp_results_sizer.Add(static_line_5, 0, wx.EXPAND, 0)
        comp_results_sizer.Add(self.save_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        comp_sizer.Add(comp_results_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.nb_comp_panel.SetSizer(comp_sizer)
        lpsweep_hp_label = wx.StaticText(self.nb_lp_panel, wx.ID_ANY, "HP cutting frequency")
        lpsweep_hp_sizer.Add(lpsweep_hp_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        lpsweep_hp_sizer.Add(self.lpsweep_hp, 0, wx.ALL, 5)
        lpsweep_sizer.Add(lpsweep_hp_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 5)
        lpsweep_lps_label = wx.StaticText(self.nb_lp_panel, wx.ID_ANY, "List of LP cutting frequencies")
        lpsweep_sizer.Add(lpsweep_lps_label, 0, wx.LEFT, 5)
        lpsweep_sizer.Add(self.lpsweep_lps, 0, wx.ALL | wx.EXPAND, 5)
        lpsweep_sizer.Add(self.lpsweep_go_btn, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.nb_lp_panel.SetSizer(lpsweep_sizer)
        hpsweep_lp_label = wx.StaticText(self.nb_hp_panel, wx.ID_ANY, "LP cutting frequency")
        hpsweep_lp_sizer.Add(hpsweep_lp_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
        hpsweep_lp_sizer.Add(self.hpsweep_lp, 0, wx.ALL, 5)
        hpsweep_sizer.Add(hpsweep_lp_sizer, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 5)
        hpsweep_hps_label = wx.StaticText(self.nb_hp_panel, wx.ID_ANY, "List of HP cutting frequencies")
        hpsweep_sizer.Add(hpsweep_hps_label, 0, wx.LEFT, 5)
        hpsweep_sizer.Add(self.hpsweep_hps, 0, wx.ALL | wx.EXPAND, 5)
        hpsweep_sizer.Add(self.hpsweep_go_btn, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.nb_hp_panel.SetSizer(hpsweep_sizer)
        self.settings_notebook.AddPage(self.nb_comp_panel, "compensation")
        self.settings_notebook.AddPage(self.nb_lp_panel, "lp sweep")
        self.settings_notebook.AddPage(self.nb_hp_panel, "hp sweep")
        main_sizer.Add(self.settings_notebook, 0, wx.ALL, 5)
        results_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Results")
        results_sizer.Add(results_label, 0, 0, 0)
        results_sizer.Add(self.results_text, 1, wx.EXPAND, 0)
        main_sizer.Add(results_sizer, 1, wx.ALL | wx.EXPAND, 5)
        loag_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Log")
        log_sizer.Add(loag_label, 0, 0, 0)
        log_sizer.Add(self.log_text, 1, wx.EXPAND, 0)
        log_sizer.Add(self.log_save_btn, 0, 0, 0)
        main_sizer.Add(log_sizer, 1, wx.ALL | wx.EXPAND, 5)
        self.main_panel.SetSizer(main_sizer)
        panel_sizer.Add(self.main_panel, 1, wx.EXPAND, 0)
        self.SetSizer(panel_sizer)
        self.Layout()
        # end wxGlade

    def on_exit(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_exit' not implemented!")
        event.Skip()

    def on_prep(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_prep' not implemented!")
        event.Skip()

    def on_vector(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_vector' not implemented!")
        event.Skip()

    def on_crossings(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_crossings' not implemented!")
        event.Skip()

    def on_start(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_start' not implemented!")
        event.Skip()

    def on_about(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_about' not implemented!")
        event.Skip()

    def on_calibfile_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_calibfile_btn' not implemented!")
        event.Skip()

    def on_surfile_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_surfile_btn' not implemented!")
        event.Skip()

    def on_load_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_load_btn' not implemented!")
        event.Skip()

    def on_comp_go_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_comp_go_btn' not implemented!")
        event.Skip()

    def on_plot_calib_spectrum_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_plot_calib_spectrum_btn' not implemented!")
        event.Skip()

    def on_plot_calib_time_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_plot_calib_time_btn' not implemented!")
        event.Skip()

    def on_plot_calib_scatter_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_plot_calib_scatter_btn' not implemented!")
        event.Skip()

    def on_plot_sur_spectrum_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_plot_sur_spectrum_btn' not implemented!")
        event.Skip()

    def on_plot_sur_time_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_plot_sur_time_btn' not implemented!")
        event.Skip()

    def on_plot_sur_scatter_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_plot_sur_scatter_btn' not implemented!")
        event.Skip()

    def on_show_par_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_show_par_btn' not implemented!")
        event.Skip()

    def on_save_par_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_save_par_btn' not implemented!")
        event.Skip()

    def on_save_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_save_btn' not implemented!")
        event.Skip()

    def on_lpsweep_go_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_lpsweep_go_btn' not implemented!")
        event.Skip()

    def on_hpsweep_go_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_hpsweep_go_btn' not implemented!")
        event.Skip()

    def on_log_save_btn(self, event):  # wxGlade: MyScalarFrame.<event_handler>
        print("Event handler 'on_log_save_btn' not implemented!")
        event.Skip()


# end of class MyScalarFrame


class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyScalarFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True


# end of class MyApp


if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
